/**
 * Firebase Storage Security Rules for MedFlow
 * 
 * Production-ready storage rules with:
 * - Medical document security and validation
 * - Role-based access control
 * - File type and size restrictions
 * - GDPR compliance for medical data
 * - Performance optimization
 * 
 * @author MedFlow Team
 * @version 2.0
 * @compliance GDPR, HIPAA-ready
 */

rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    
    // ==========================================
    // HELPER FUNCTIONS
    // ==========================================
    
    // Check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Get authenticated user ID
    function getUserId() {
      return request.auth.uid;
    }
    
    // Check if user has medical staff role
    function isMedicalStaff() {
      return isAuthenticated() && 
             request.auth.token.role in ['doctor', 'nurse'];
    }
    
    // Check if user is doctor
    function isDoctor() {
      return isAuthenticated() && 
             request.auth.token.role == 'doctor';
    }
    
    // Validate file type for medical documents
    function isValidMedicalFileType() {
      return resource.contentType in [
        'application/pdf',
        'image/jpeg', 
        'image/jpg',
        'image/png'
      ];
    }
    
    // Validate file size (10MB limit for medical documents)
    function isValidFileSize() {
      return resource.size <= 10 * 1024 * 1024; // 10MB
    }
    
    // Check if filename is valid (no malicious characters)
    function isValidFileName() {
      return resource.name.matches('[a-zA-Z0-9._-]+\\.(pdf|jpg|jpeg|png)$');
    }
    
    // Extract user ID from file path
    function extractUserIdFromPath(path) {
      return path.split('/')[1]; // assuming path format: appointments/{userId}/...
    }
    
    // Extract appointment ID from file path
    function extractAppointmentIdFromPath(path) {
      return path.split('/')[1]; // assuming path format: appointments/{appointmentId}/...
    }
    
    // ==========================================
    // APPOINTMENT DOCUMENTS
    // ==========================================
    
    // Medical documents uploaded for appointments
    match /appointments/{appointmentId}/{fileName} {
      
      // Read access rules
      allow read: if isAuthenticated() && 
                     isMedicalStaff() && (
        // Document uploader can read
        extractUserIdFromPath(resource.name) == getUserId() ||
        // Doctor who owns the appointment can read (verify via Firestore)
        isDoctor()
        // Note: In production, add Firestore lookup to verify appointment ownership
      );
      
      // Write (upload) access rules
      allow write: if isAuthenticated() && 
                      isMedicalStaff() &&
                      isValidMedicalUpload() &&
                      appointmentId.matches('[a-zA-Z0-9]+'); // Valid appointment ID format
      
      // Delete access rules
      allow delete: if isAuthenticated() && 
                       isMedicalStaff() &&
                       extractUserIdFromPath(resource.name) == getUserId();
      
      // Validate medical document upload
      function isValidMedicalUpload() {
        return isValidMedicalFileType() &&
               isValidFileSize() &&
               isValidFileName() &&
               // Ensure filename includes timestamp and user ID for security
               resource.name.matches('.*[0-9]{13}_.*'); // Timestamp prefix
      }
    }
    
    // ==========================================
    // USER PROFILE IMAGES
    // ==========================================
    
    // User profile pictures
    match /profiles/{userId}/avatar.{extension} {
      
      // Read access (own profile only)
      allow read: if isAuthenticated() && 
                     userId == getUserId();
      
      // Write access (own profile only)
      allow write: if isAuthenticated() && 
                      userId == getUserId() &&
                      isValidProfileImage();
      
      // Delete access (own profile only)
      allow delete: if isAuthenticated() && 
                       userId == getUserId();
      
      // Validate profile image
      function isValidProfileImage() {
        return resource.contentType.matches('image/.*') &&
               resource.size <= 2 * 1024 * 1024 && // 2MB limit
               extension in ['jpg', 'jpeg', 'png', 'webp'];
      }
    }
    
    // ==========================================
    // MEDICAL REPORTS (Future expansion)
    // ==========================================
    
    // Medical reports and lab results (placeholder)
    match /medical_reports/{reportId}/{fileName} {
      // Strict access control for medical reports
      allow read, write, delete: if false; // Disabled until proper implementation
      
      // TODO: Implement when medical reports feature is added
      // - GDPR compliance verification
      // - Patient consent checks
      // - Medical professional licensing verification
      // - Comprehensive audit logging
      // - Encryption at rest verification
    }
    
    // ==========================================
    // SYSTEM FILES
    // ==========================================
    
    // System assets and configurations
    match /system/{allPaths=**} {
      // Read-only access for authenticated medical staff
      allow read: if isAuthenticated() && isMedicalStaff();
      
      // No write access via client
      allow write, delete: if false;
    }
    
    // ==========================================
    // TEMPORARY UPLOADS
    // ==========================================
    
    // Temporary upload area for processing
    match /temp/{userId}/{fileName} {
      
      // Only own temporary files
      allow read, write: if isAuthenticated() && 
                            userId == getUserId() &&
                            isMedicalStaff();
      
      // Auto-cleanup after 1 hour (handled by Cloud Functions)
      allow delete: if isAuthenticated() && 
                       userId == getUserId();
    }
    
    // ==========================================
    // BACKUP AND ARCHIVE
    // ==========================================
    
    // Backup storage (system only)
    match /backups/{allPaths=**} {
      allow read, write, delete: if false; // System only
    }
    
    // Archive storage (long-term retention)
    match /archive/{allPaths=**} {
      // Read-only for medical staff (for historical data)
      allow read: if isAuthenticated() && 
                     isMedicalStaff();
      
      // No client write access
      allow write, delete: if false;
    }
    
    // ==========================================
    // AI PROCESSING
    // ==========================================
    
    // Files for AI processing
    match /ai_processing/{processingId}/{fileName} {
      // Read access for document owner after processing
      allow read: if isAuthenticated() && 
                     isMedicalStaff();
      
      // No direct client write access (AI service only)
      allow write, delete: if false;
    }
    
    // ==========================================
    // SECURITY LOGS
    // ==========================================
    
    // Security and audit logs
    match /logs/{allPaths=**} {
      // No client access to logs
      allow read, write, delete: if false;
    }
    
    // ==========================================
    // DENY ALL OTHER ACCESS
    // ==========================================
    
    // Explicitly deny access to any other paths
    match /{allPaths=**} {
      allow read, write, delete: if false;
    }
  }
}

/**
 * Additional Security Notes:
 * 
 * 1. File Encryption:
 *    - All medical documents should be encrypted at rest
 *    - Use Firebase's built-in encryption + additional client-side encryption for sensitive data
 * 
 * 2. Audit Logging:
 *    - All file access should be logged via Cloud Functions
 *    - Include user ID, timestamp, action, and file path
 *    - Store logs in separate, secure collection
 * 
 * 3. GDPR Compliance:
 *    - Implement data retention policies
 *    - Provide data export functionality
 *    - Ensure right to be forgotten (data deletion)
 *    - Maintain consent records
 * 
 * 4. Performance Optimization:
 *    - Use Firebase CDN for frequently accessed files
 *    - Implement file compression for large documents
 *    - Use appropriate caching headers
 * 
 * 5. Monitoring and Alerts:
 *    - Set up alerts for unusual access patterns
 *    - Monitor file upload/download volumes
 *    - Track failed authentication attempts
 *    - Monitor for potential data breaches
 * 
 * 6. Future Enhancements:
 *    - Implement virus scanning for uploaded files
 *    - Add automatic OCR for scanned documents
 *    - Integrate with medical imaging standards (DICOM)
 *    - Add support for encrypted video consultations
 */
